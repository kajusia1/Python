#check if a str is a palindrome
class Solution:
    def isPalindrome(self, s: str) -> bool:   
        s= [*re.sub('[\W_]', '', s).lower()]   # re.sub('[\W_]', '', s) removes all non-alphanumeric characters, [*str] splits str into an array of char

        return True if s==s[::-1] else False

#find the longest common prefix in the list of strings
class Solution:
    def longestCommonPrefix(self, s: List[str]) -> str:
        s=sorted(s)

        prefix =""

        for i in range(min(len(s[0]), len(s[-1]))):
            if s[0][0:i+1] == s[-1][0:i+1]:
                prefix = s[0][0:i+1]
                continue
            else:
                break

        return prefix

# reverse the order of the words in str
class Solution:
    def reverseWords(self, s: str) -> str:
        s =s.split()
        s= ' '.join(s[::-1])
        return s

# fint the index of a first occurence of needle str in haystack str
class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        result=re.search(needle, haystack)

        if result != None:
            return result.start()
        else:
            return -1
       
