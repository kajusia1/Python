# Check if a given board is valid

def isValidSudoku(self, board: List[List[str]]) -> bool:
    nums = []
        
    for i in range(9):
        for j in range(9):
            element = board[i][j]
            if element != '.':
                # Add to the list (row, element), (element, column), (smallsquare element)
                nums += [(i,element), (element, j), (i//3, j//3, element)]

    # Check if there are any duplicates
    return len(nums) == len(set(nums))

#Solve the board

board=[
    [5,3,0,0,7,0,0,0,0],
    [6,0,0,1,9,5,0,0,0],
    [0,9,8,0,0,0,0,6,0],
    [8,0,0,0,6,0,0,0,3],
    [4,0,0,8,0,3,0,0,1],
    [7,0,0,0,2,0,0,0,6],
    [0,6,0,0,0,0,2,8,0],
    [0,0,0,4,1,9,0,0,5],
    [0,0,0,0,8,0,0,7,9]]

def print_board(bo):
    #len(board) - rows
    #len(board[0]) -columns
    for i in range(len(bo)):
        if i%3 == 0 and i != 0:
            print("---------------------")
        for j in range(len(bo[0])):
            if j%3 == 0 and j != 0:
               print("|" + " " + str(bo[i][j]), end=" ")
            elif j == 8:
                print(bo[i][j])
            else:
                print(bo[i][j], end=" ")

def empty(bo):
    for i in range(len(bo)):
        for j in range(len(bo[0])):
            if bo[i][j] == 0:
                return (i, j)
    return None

def valid(bo,num, pos):
    #pos = (row, col)   pos[0]=row, pos[1]=col
    #check the row
    for i in range(len(bo[0])):
        if bo[pos[0]][i] == num and pos[1] != i:
            return False
    #check the column
    for j in range(len(bo)):
        if bo[j][pos[1]] == num and pos[0] != j:
            return False
    #check the smaller box
    box_row = pos[0]//3
    box_col = pos[1]//3
    #check the small box
    for i in range(box_row*3, box_row*3 + 3):
        for j in range(box_col*3, box_col*3 + 3):
            if bo[i][j] == num and (i, j) != pos:
                return False
    return True

def solve(bo):
    zero = empty(bo)
    if not zero:
        return True
    else:
        row, col = zero
    for num in range(1, 10):
        if valid(bo, num, (row, col)):
            bo[row][col] = num
            if solve(bo):
                return True
            bo[row][col] = 0
    return False

print_board(board)
solve(board)
print("solving...")
print_board(board)
print("SOLVED")
