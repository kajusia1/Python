##find an element that appears more than n / 2 times where n is the length of the array

import numpy as np

class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        unique_nums = np.array(list(dict.fromkeys(nums)))
        for i in range(len(unique_nums)):
            if nums.count(unique_nums[i]) > len(nums)/2:
                return unique_nums[i]

#rotate the array to the right by k steps
class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        nums[:] = nums[len(nums)-k::] + nums[:len(nums)-k]

#remove an element
class Solution:
    def removeElement(self, nums: List[int], val: int) -> int:

        for i in range(nums.count(val)):
            nums.remove(val)

#remove duplicates 
class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        nums[::] = list(dict.fromkeys(nums))

#check if str s is a subsequence of str t
class Solution:
    def isSubsequence(self, s: str, t: str) -> bool:

        for i in range(len(s)):
            if re.search(s[i],t) != None:
                t= t[re.search(s[i],t).start()+1:]
                continue
            else:
                return False
                break

        return True

        
